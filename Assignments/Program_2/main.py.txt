"""
Program:
--------
    Program 2 - DBScan Part 1

Description:
------------
    This program sets variables to set up and then call forth a pygame screen to display data on.
It will then open up five .csv files, containing crime information on the NYC burrows. They will
be passed to a function that will read in line by line and store them in a list structure that
will hold all data in a parallel format to be accessed and modified, and return a list of tuples
which will be stored as (x,y) coordinates to be plotted. The pygame main loop will start and
these points will be passed in to be drawn as circles which will display where each crime has
happened in NYC with the five burrows, with each burrow being color coded. Upon closing the 
pygame display, a screenshot will be saved of the progress.

Name: Matthew Schenk
Date: 19 June 2017
"""


import pygame
import random
from dbscan import *
import sys,os
import pprint as pp

# Get current working path
DIRPATH = os.path.dirname(os.path.realpath(__file__))

print('Matthew Schenk')
print('CMPS 5323 - Dr. Griffin')
print('Program 2: NYC Crime')


def calculate_mbrs(points, epsilon, min_pts):
    """
    Find clusters using DBscan and then create a list of bounding rectangles
    to return.
    """
    mbrs = []
    clusters =  dbscan(points, epsilon, min_pts)

    """
    Traditional dictionary iteration to populate mbr list
    Does same as below
    """
    # for id,cpoints in clusters.items():
    #     xs = []
    #     ys = []
    #     for p in cpoints:
    #         xs.append(p[0])
    #         ys.append(p[1])
    #     max_x = max(xs) 
    #     max_y = max(ys)
    #     min_x = min(xs)
    #     min_y = min(ys)
    #     mbrs.append([(min_x,min_y),(max_x,min_y),(max_x,max_y),(min_x,max_y),(min_x,min_y)])
    # return mbrs

    """
    Using list index value to iterate over the clusters dictionary
    Does same as above
    """
    for id in range(len(clusters)-1):
        xs = []
        ys = []
        for p in clusters[id]:
            xs.append(p[0])
            ys.append(p[1])
        max_x = max(xs) 
        max_y = max(ys)
        min_x = min(xs)
        min_y = min(ys)
        mbrs.append([(min_x,min_y),(max_x,min_y),(max_x,max_y),(min_x,max_y),(min_x,min_y)])
    return mbrs


def clean_area(screen,origin,width,height,color):
    """
    Prints a color rectangle (typically white) to "erase" an area on the screen.
    Could be used to erase a small area, or the entire screen.
    """
    ox,oy = origin
    points = [(ox,oy),(ox+width,oy),(ox+width,oy+height),(ox,oy+height),(ox,oy)]
    pygame.draw.polygon(screen, color, points, 0)

def populate_burrow(burrow):
    """Populate a list of crime locations for a NYC burrow.

    This function will accept a string, which is the name of the file it is to open. It
    will then procede line by line through the file, sorting and splitting the information,
    sorting the information into separate keys until one line is finsihed and will continue to
    do so for the entire file, where it will add each sorted line of keys to a list crimes. It
    will then start to manipulate the data by dividing by 1000 to have the floats fit on our
    pixel screen, as well as invert the y axis, and calculate the min/max for the file passed in,
    and place the new modified (x,y) coordinates in a list of points. Each point will be scaled
    according to the total min and max, which are hard coded in after searching the data for them,
    and since tuples are immutable the adjusted coordinates are placed into a new list which is returned.
    The function will also display output feedback, showing how many crimes were read, added, and adjusted.

    Args:
        burrow: A string containing the name of the file to be opened

    Returns:
        A list of tuples that have been adjusted, inverted, and scaled.
    """
    points = []
    adjustedpoints = []
    keys = []
    crimes = []
    got_keys = False

    #This code opens up filtered files and stores them in list crimes, by line to keep everything parallel
    with open(burrow) as f:
        for line in f:
            line = ''.join(x if i % 2 == 0 else x.replace(',', ':') for i, x in enumerate(line.split('"')))
            line = line.strip().split(',')
            if not got_keys:
                keys = line
                #print(keys)
                got_keys = True
                continue

            crimes.append(line)
    print('Finished Reading in Crime Data for '+burrow)

    #Loop to traverse through and set min/max x,y values
    """
    This section of code is actually unneeded now, due to values not needing to be divided by 1000.
    However, it can still provide the min/max values to be used for the scaling later on, if new data
    is presented.
    """
    minx = 100000000
    miny = 100000000
    maxx = -100000000
    maxy = -100000000
    counter = 0
    for crime in crimes:
        #print(crime[19],crime[20])
        #print(counter)
        counter += 1
        #Found Error on Line 6587 in Brooklyn File, removed as no lat/long or x,y provided
        #Found Error on Line 4438 in Bronx File, removed as no lat/long or x,y provided
        #Found Error on Line 5443 in Manhattan File, removed as no lat/long or x,y provided
        x = float(crime[19])
        #/1000
        y = float(crime[20])
        #/1000
        #y = abs(y - 700)
        #Was dividing points by 1000 to scale them down, not needed as the scaling below
        #fixes that itself, with this however, points are uniformly distributed and shown
        #as a less dense area of crimes due to rounding
        if minx > x:
            minx = x
        if miny > y:
            miny = y
        if maxx < x:
            maxx = x
        if maxy < y:
            maxy = y
        points.append((int(x),int(y)))
    print('Finsihed Appending Points List for '+burrow)
    print('Number of crimes added: ',counter)
    #print(points)

    #Code for adjusting points for scaling, and appending to points list
    #Possible to access tuples in append[], and then amend instead of using crime again
    #Above line is incorrect, tuples are immutable
    counter = 0
    for item in points:
        x,y = item
        #x = (x - 913.46)/(1067.186 - 913.46)
        x = (x - 913357)/(1067226 - 913357)
        x =  x * 1000
        #y = (y - 428.18)/(578.688 - 428.18)
        y = 1 - (y - 121250)/(271820 - 121250)
        y = y * 1000
        adjustedpoints.append((int(x),int(y)))
        counter += 1
    #print(points)
    #print(minx)
    #print(maxx)
    #print(miny)
    #print(maxy)
    #print(adjustedpoints)

    print('Finished Appending Adjusted Points List for '+burrow)
    print('Number of crimes added: ',counter)
    return adjustedpoints



background_colour = (255,255,255)
black = (0,0,0)
(width, height) = (1000, 1000)

screen = pygame.display.set_mode((width, height))
pygame.display.set_caption('NYC Crime')
screen.fill(background_colour)

pygame.font.init()
displaytitle = pygame.font.SysFont('Times New Roman', 40)
title = displaytitle.render('Program 2A', False, (0,0,0))
displayname = pygame.font.SysFont('Times New Roman', 30)
name = displayname.render('Matthew Schenk', False, (0,0,0))


pygame.display.flip()

epsilon = 0.5
min_pts = 3.0

#Code for populating the five burrows
bronx = 'filtered_crimes_bronx.csv'
bronx_crimes = []
bronx_crimes = populate_burrow(bronx)

brooklyn = 'filtered_crimes_brooklyn.csv'
brooklyn_crimes = []
brooklyn_crimes = populate_burrow(brooklyn)

manhattan = 'filtered_crimes_manhattan.csv'
manhattan_crimes = []
manhattan_crimes = populate_burrow(manhattan)

queens = 'filtered_crimes_queens.csv'
queens_crimes = []
queens_crimes = populate_burrow(queens)

staten_island = 'filtered_crimes_staten_island.csv'
staten_island_crimes = []
staten_island_crimes = populate_burrow(staten_island)

#testing points and overwriting
points = manhattan_crimes
#mbrs = calculate_mbrs(points, epsilon, min_pts)

running = True
while running:
    screen.blit(title,(0,0))
    screen.blit(name,(0,45))

    for p in points:
        #Add if/elif statement to print dots in colors here, by traversing crime in crimes and using crime['crimename']
        #for crime in crimes:
        #if crime[?] == 'LARCENY', elif 'ASSAULT', elif 'HARRASSMENT', elif 'DRUGS', elif 'VEHICLE FRAUD'
        #or use dictionary when reading from files containing key as (x,y) with values crimename and color set to crimename
        #then can traverse through dictionary here, and just pass in the color name with the set coord key
        pygame.draw.circle(screen, black, p, 1, 0)
    for c in bronx_crimes:
        pygame.draw.circle(screen, (2,120,120), c, 1, 0)
    for c in brooklyn_crimes:
        pygame.draw.circle(screen, (128,22,56), c, 1, 0)
    for c in manhattan_crimes:
        pygame.draw.circle(screen, (194,35,38), c, 1, 0)
    for c in queens_crimes:
        pygame.draw.circle(screen, (243,115,56), c, 1, 0)
    for c in staten_island_crimes:
        pygame.draw.circle(screen, (253,182,50), c, 1, 0)
    
    #for mbr in mbrs:
    #    pygame.draw.polygon(screen, black, mbr, 2)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            pygame.image.save(screen, DIRPATH+'/'+'all_buroughs_screen_shot.png')
        if event.type == pygame.MOUSEBUTTONDOWN:
            clean_area(screen,(0,0),width,height,(255,255,255))
            points.append(event.pos)
            mbrs = calculate_mbrs(points, epsilon, min_pts)
    pygame.display.flip()